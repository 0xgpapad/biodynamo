package ini.cx3d.utilities;

import ini.cx3d.swig.ClassToBeDebugged;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Proxy;
import java.util.AbstractSequentialList;
import java.util.LinkedList;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Test correctness of v2 debugging approach
 * (Subclassing the tested class and forwarding the call to the superclass)
 * Does not cover exception handling yet
 */
public class DebugApproachTest {
    static class TestClass{

        TestClass(double d) {
            System.out.println("inside constructor with param "+d);
        }

        void voidMethod(String s){
            System.out.println("inside voidMethod with param "+s);
        }

        int[] noParameterMethod(){
            System.out.println("inside noParameterMethod");
            return new int[]{ 2, 6 };
        }

        void callOtherMethod(){
            System.out.println("inside callOtherMethod");
            voidMethod("call nested method");
        }

        public boolean equals(Object other) {
            if (other == null) {
                return false;
            }
            if (other instanceof TestClass) {
                return other == this;
            }
            return false;
        }

        public String toString() {
            return "toString of TestClass";
        }
    }

    /**
     * methods bodies are automatically generated by an IDE
     */
    static class TestDebug extends TestClass{
        TestDebug(double d) {
            super(d);
            DebugUtil.logMethodCall("TestDebug", this, new Object[]{d});
        }

        @Override
        void voidMethod(String s) {
            DebugUtil.logMethodCall("voidMethod", this, new Object[]{s});
            super.voidMethod(s);
            DebugUtil.logMethodReturn("voidMethod", this, null);
        }

        @Override
        int[] noParameterMethod() {
            DebugUtil.logMethodCall("noParameterMethod", this, new Object[]{});
            int[] ret = super.noParameterMethod();
            DebugUtil.logMethodReturn("noParameterMethod", this ,ret);
            return ret;
        }

        @Override
        void callOtherMethod() {
            DebugUtil.logMethodCall("callOtherMethod", this, new Object[]{});
            super.callOtherMethod();
            DebugUtil.logMethodReturn("callOtherMethod", this ,null);
        }

        @Override
        public boolean equals(Object other) {
            DebugUtil.logMethodCall("equals", this, new Object[]{ other});
            boolean ret = super.equals(other);
            DebugUtil.logMethodReturn("equals", this ,ret);
            return ret;
        }
    }

    @Test
    public void testJava() {
        final ByteArrayOutputStream myOut = new ByteArrayOutputStream();
        System.setOut(new PrintStream(myOut));

        TestClass test = new TestDebug(1.0);
        test.voidMethod("Hello World");
        assertArrayEquals(new int[]{2, 6}, test.noParameterMethod());
        test.callOtherMethod();
        test.equals(null);
        test.equals(test);

        final String result = myOut.toString();
        String expected = "inside constructor with param 1.0\n" +
                "DBG TestDebug args: {3ff0000000000000, } innerState: toString of TestClass\n" +
                "DBG voidMethod args: {Hello World, } innerState: toString of TestClass\n" +
                "inside voidMethod with param Hello World\n" +
                "DBG voidMethod return null innerState: toString of TestClass\n" +
                "DBG noParameterMethod args: {} innerState: toString of TestClass\n" +
                "inside noParameterMethod\n" +
                "DBG noParameterMethod return {2, 6, } innerState: toString of TestClass\n" +
                "DBG callOtherMethod args: {} innerState: toString of TestClass\n" +
                "inside callOtherMethod\n" +
                "DBG voidMethod args: {call nested method, } innerState: toString of TestClass\n" +
                "inside voidMethod with param call nested method\n" +
                "DBG voidMethod return null innerState: toString of TestClass\n" +
                "DBG callOtherMethod return null innerState: toString of TestClass\n" +
                "DBG equals args: {null, } innerState: toString of TestClass\n" +
                "DBG equals return false innerState: toString of TestClass\n" +
                "DBG equals args: {toString of TestClass, } innerState: toString of TestClass\n" +
                "DBG equals return true innerState: toString of TestClass\n";
        assertEquals(expected, result);
    }

    @Test
    public void testCpp() {
        final ByteArrayOutputStream myOut = new ByteArrayOutputStream();
        System.setOut(new PrintStream(myOut));

        ClassToBeDebugged test = ClassToBeDebugged.create(1.0);
        test.voidMethod("Hello World", 5);
        assertArrayEquals(new int[]{2, 6}, test.noParameterMethod());
        test.callOtherMethod();
        test.equals(null);
        test.equals(test);

        final String result = myOut.toString();
        String expected = "inside constructor with param 0\n" +
                "DBG ClassToBeDebugged created args: {3ff0000000000000, } innerState: toString of TestClass\n" +
                "DBG voidMethod args: {Hello World, 5, } innerState: toString of TestClass\n" +
                "inside voidMethod with param Hello World\n" +
                "DBG voidMethod return  innerState: toString of TestClass\n" +
                "DBG noParameterMethod args: {} innerState: toString of TestClass\n" +
                "DBG noParameterMethod return {2, 6, } innerState: toString of TestClass\n" +
                "DBG callOtherMethod args: {} innerState: toString of TestClass\n" +
                "inside callOtherMethod\n" +
                "DBG voidMethod args: {call nested method, 5, } innerState: toString of TestClass\n" +
                "inside voidMethod with param call nested method\n" +
                "DBG voidMethod return  innerState: toString of TestClass\n" +
                "DBG callOtherMethod return  innerState: toString of TestClass\n" +
                "DBG equals args: {toString of TestClass, } innerState: toString of TestClass\n" +
                "DBG equals return true innerState: toString of TestClass\n";
                // FIXME  cout is not captured with System.setOut
//              assertEquals(expected, result);
    }
}
